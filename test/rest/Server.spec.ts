import { expect } from "chai";
import request from "supertest";
import { StatusCodes } from "http-status-codes";
import { Log } from "@ubccpsc310/project-support";
import Server from "../../src/rest/Server";
import { clearDisk, getContentFromArchives } from "../TestUtil";
//import InsightFacade from "../../src/controller/InsightFacade";
import { InsightDatasetKind } from "../../src/controller/IInsightFacade";
import * as fs from "fs-extra";
//import InsightFacade from "../../src/controller/InsightFacade";

describe("Facade C3", function () {
	let server: Server;
	const portNumber: number = 4321;
	const serverURL: string = "http://localhost:" + portNumber;

	//let facade: InsightFacade;

	let sections: Buffer<ArrayBufferLike>;
	let rooms: Buffer<ArrayBufferLike>;
	let invalid: string;
	//let pair: string;
	//	let campus: string;

	before(async function () {
		sections = await fs.readFile("test/resources/archives/" + "pair.zip");
		rooms = await fs.readFile("test/resources/archives/" + "campus.zip");
		invalid = await getContentFromArchives("small.zip");

		// pair = await getContentFromArchives("pair.zip");
		// campus = await getContentFromArchives("campus.zip");

		// rooms = await getContentFromArchives("campus.zip");

		//facade = new InsightFacade();

		server = new Server(portNumber);
		try {
			await server.start();
		} catch (err) {
			Log.error(err);
			expect.fail("Server did not start");
		}

		await clearDisk();
	});

	after(async function () {
		try {
			await server.stop();
		} catch (err) {
			Log.error(`Server failed to stop: ${err}`);
		}

		await clearDisk();
	});

	beforeEach(function () {
		// might want to add some process logging here to keep track of what is going on

		// this line of code is generated by AI
		Log.test(`Starting test: ${this.currentTest?.title}`);
	});

	afterEach(async function () {
		// might want to add some process logging here to keep track of what is going on
		// this line of code is generated by AI
		Log.test(`Finished test: ${this.currentTest?.title}`);
		//await clearDisk();
	});

	it("PUT test for sections dataset", async function () {
		//const SERVER_URL = "TBD";
		const ENDPOINT_URL = `/dataset/sections/${InsightDatasetKind.Sections}`;
		//const ZIP_FILE_DATA = sections;

		try {
			//await facade.addDataset("sections", sections, InsightDatasetKind.Sections);

			const res = await request(serverURL)
				.put(ENDPOINT_URL)
				.send(sections)
				.set("Content-Type", "application/x-zip-compressed");
			expect(res.status).to.be.equal(StatusCodes.OK);
			//assertions that check res.body
			expect(res.body).to.have.property("result");
			expect(res.body.result).to.be.an("array");
			expect(res.body.result).to.include("sections");
		} catch (err) {
			Log.error(err);
		}
	});

	it("PUT test for rooms dataset", async function () {
		//const SERVER_URL = "TBD";
		const ENDPOINT_URL = `/dataset/rooms/${InsightDatasetKind.Rooms}`;
		//const ZIP_FILE_DATA = sections;

		try {
			//await facade.addDataset("sections", sections, InsightDatasetKind.Sections);

			const res = await request(serverURL)
				.put(ENDPOINT_URL)
				.send(rooms)
				.set("Content-Type", "application/x-zip-compressed");
			expect(res.status).to.be.equal(StatusCodes.OK);
			//assertions that check res.body
			expect(res.body).to.have.property("result");
			expect(res.body.result).to.be.an("array");
			expect(res.body.result).to.include("rooms");
		} catch (err) {
			Log.error(err);
		}
	});

	it("PUT test with invalid id (underscores)", async function () {
		try {
			const res = await request(serverURL)
				.put(`/dataset/invalid_ID/${InsightDatasetKind.Sections}`)
				.send(sections)
				.set("Content-Type", "application/x-zip-compressed");

			expect(res.status).to.be.equal(StatusCodes.BAD_REQUEST);
			expect(res.body).to.have.property("error");
		} catch (err) {
			Log.error(err);
			expect.fail("Request failed");
		}
	});

	it("PUT test with base64 string, not buffer", async function () {
		try {
			const res = await request(serverURL)
				.put(`/dataset/ID/${InsightDatasetKind.Sections}`)
				.send(invalid)
				.set("Content-Type", "application/x-zip-compressed");

			expect(res.status).to.be.equal(StatusCodes.BAD_REQUEST);
			expect(res.body).to.have.property("error");
		} catch (err) {
			Log.error(err);
			expect.fail("Request failed");
		}
	});

	it("GET test, should list all datasets added so far", async function () {
		//facade = new InsightFacade();

		// const first = await facade.addDataset("rooms", campus, InsightDatasetKind.Rooms);
		// const second = await facade.addDataset("sections", pair, InsightDatasetKind.Sections);
		// Log.info(first);
		// Log.info(second);

		// don't need try catch, listDatasets() doesnt throw errors
		const res = await request(serverURL).get("/datasets");
		expect(res.status).to.be.equal(StatusCodes.OK);
		expect(res.body).to.have.property("result");
		expect(res.body.result).to.be.an("array");
		Log.info(res.body);
		//expect(res.body.result.length).to.be.equal(2);

		const datasets = res.body.result;
		const datasetIDs = datasets.map((dataset: any) => dataset.id);
		expect(datasetIDs).to.include("sections");
		expect(datasetIDs).to.include("rooms");
	});

	it("POST test valid query", async function () {
		try {
			const query = {
				WHERE: {
					GT: {
						sections_avg: 97,
					},
				},
				OPTIONS: {
					COLUMNS: ["sections_dept", "sections_avg"],
					ORDER: "sections_avg",
				},
			};

			const res = await request(serverURL).post("/query").send(query).set("Content-Type", "application/json");

			const numElements = 49;
			expect(res.status).to.be.equal(StatusCodes.OK);
			expect(res.body).to.have.property("result");
			expect(res.body.result).to.be.an("array");
			expect(res.body.result.length).to.be.at.least(numElements);
		} catch (err) {
			Log.error(err);
			expect.fail("Request failed");
		}
	});

	it("DELETE test for existing dataset - should remove successfully", async function () {
		try {
			const res = await request(serverURL).delete(`/dataset/sections`);

			expect(res.status).to.be.equal(StatusCodes.OK);
			expect(res.body).to.have.property("result");
			expect(res.body.result).to.equal(`sections`);
		} catch (err) {
			Log.error(err);
			expect.fail("Request failed");
		}
	});

	it("DELETE test with dataset not added", async function () {
		try {
			const res = await request(serverURL).delete("/dataset/invalid");

			expect(res.status).to.be.equal(StatusCodes.NOT_FOUND);
			expect(res.body).to.have.property("error");
		} catch (err) {
			Log.error(err);
			expect.fail("Request failed");
		}
	});

	it("DELETE test with invalid id", async function () {
		try {
			const res = await request(serverURL).delete("/dataset/invalid_id");

			expect(res.status).to.be.equal(StatusCodes.BAD_REQUEST);
			expect(res.body).to.have.property("error");
		} catch (err) {
			Log.error(err);
			expect.fail("Request failed");
		}
	});

	it("GET test remaining datasets", async function () {
		//facade = new InsightFacade();

		// const first = await facade.addDataset("rooms", campus, InsightDatasetKind.Rooms);
		// const second = await facade.addDataset("sections", pair, InsightDatasetKind.Sections);
		// Log.info(first);
		// Log.info(second);

		// don't need try catch, listDatasets() doesnt throw errors
		const res = await request(serverURL).get("/datasets");
		expect(res.status).to.be.equal(StatusCodes.OK);
		expect(res.body).to.have.property("result");
		expect(res.body.result).to.be.an("array");
		Log.info(res.body);
		//expect(res.body.result.length).to.be.equal(2);

		const datasets = res.body.result;
		const datasetIDs = datasets.map((dataset: any) => dataset.id);
		expect(datasetIDs).to.include("rooms");
	});

	// // Sample on how to format PUT requests
	// it("PUT test for courses dataset", async function () {
	// 	const SERVER_URL = "TBD";
	// 	const ENDPOINT_URL = "TBD";
	// 	const ZIP_FILE_DATA = "TBD";
	//
	// 	try {
	// 		const res = await request(SERVER_URL)
	// 			.put(ENDPOINT_URL)
	// 			.send(ZIP_FILE_DATA)
	// 			.set("Content-Type", "application/x-zip-compressed");
	// 		expect(res.status).to.be.equal(StatusCodes.OK);
	// 		// TODO add assertions that check res.body
	// 	} catch (err) {
	// 		Log.error(err);
	// 		expect.fail();
	// 	}
	// });

	// The other endpoints work similarly. You should be able to find all instructions in the supertest documentation
});

describe("GET Tests", function () {
	let server: Server;
	const portNumber: number = 4321;
	const serverURL: string = "http://localhost:" + portNumber;

	let sections: Buffer;
	let rooms: Buffer;

	before(async function () {
		sections = await fs.readFile("test/resources/archives/pair.zip");
		rooms = await fs.readFile("test/resources/archives/campus.zip");

		server = new Server(portNumber);
		try {
			await server.start();
		} catch (err) {
			Log.error(err);
			expect.fail("Server did not start");
		}
	});

	after(async function () {
		try {
			await server.stop();
		} catch (err) {
			Log.error(`Server failed to stop: ${err}`);
		}
	});

	beforeEach(async function () {
		Log.test(`Starting test: ${this.currentTest?.title}`);
		await clearDisk(); // Ensure clean state for each test
	});

	//Used AI tools to generate these tests
	it("GET datasets w/ no datasets", async function () {
		const res = await request(serverURL).get("/datasets");

		expect(res.status).to.be.equal(StatusCodes.OK);
		expect(res.body).to.have.property("result");
		expect(res.body.result).to.be.an("array");
		expect(res.body.result.length).to.equal(0, "Expected empty dataset list");
	});

	it("GET datasets w/ one dataset", async function () {
		// Add a dataset first
		await request(serverURL)
			.put(`/dataset/sections/${InsightDatasetKind.Sections}`)
			.send(sections)
			.set("Content-Type", "application/x-zip-compressed");

		const res = await request(serverURL).get("/datasets");

		expect(res.status).to.be.equal(StatusCodes.OK);
		expect(res.body).to.have.property("result");
		expect(res.body.result).to.be.an("array");
		expect(res.body.result.length).to.equal(1, "Expected one dataset");

		const dataset = res.body.result[0];
		expect(dataset).to.have.property("id", "sections");
		expect(dataset).to.have.property("kind", InsightDatasetKind.Sections);
		expect(dataset).to.have.property("numRows").that.is.a("number");
	});

	it("GET datasets multiple datasets", async function () {
		await request(serverURL)
			.put(`/dataset/sections/${InsightDatasetKind.Sections}`)
			.send(sections)
			.set("Content-Type", "application/x-zip-compressed");

		await request(serverURL)
			.put(`/dataset/rooms/${InsightDatasetKind.Rooms}`)
			.send(rooms)
			.set("Content-Type", "application/x-zip-compressed");

		const res = await request(serverURL).get("/datasets");

		expect(res.status).to.be.equal(StatusCodes.OK);
		expect(res.body).to.have.property("result");
		expect(res.body.result).to.be.an("array");
		expect(res.body.result.length).to.equal(2, "Expected two datasets");

		const datasetIDs = res.body.result.map((dataset: any) => dataset.id);
		expect(datasetIDs).to.include("sections");
		expect(datasetIDs).to.include("rooms");

		const datasetKinds = res.body.result.map((dataset: any) => dataset.kind);
		expect(datasetKinds).to.include(InsightDatasetKind.Sections);
		expect(datasetKinds).to.include(InsightDatasetKind.Rooms);
	});
});
